{"version":3,"sources":["pager/pager.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAAyF,eAAe,CAAC,CAAA;AAEzG;;GAEG;AAaH;IAAA;QACU,iBAAY,GAAG,CAAC,CAAC,CAAE,iBAAiB;QAY5C;;WAEG;QACM,eAAU,GAAG,KAAK,CAAC;QAE5B;;;WAGG;QACO,eAAU,GAAG,IAAI,mBAAY,EAAE,CAAC;IAmB5C,CAAC;IAjBC,uBAAI,GAAJ;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;YACnB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;QAC5C,CAAC;IACH,CAAC;IAED,uBAAI,GAAJ;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;YACnB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;QAC5C,CAAC;IACH,CAAC;IAED,0BAAO,GAAP,cAAqB,MAAM,CAAC,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC,CAAC;IAEpD,0BAAO,GAAP,cAAqB,MAAM,CAAC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC,CAAC;IAErE,8BAAW,GAAX,cAAsB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IAlCjG;QAL2B,iBAAiB;QAK3C,YAAK,EAAE;;+CAAA;IAKR;QAAC,YAAK,EAAE;;0CAAA;IAKR;QAAC,YAAK,EAAE;;gDAAA;IAMR;QAAC,aAAM,EAAE;;gDAAA;IAlCX;QAAC,gBAAS,CAAC;YACT,QAAQ,EAAE,WAAW;YACrB,eAAe,EAAE,8BAAuB,CAAC,MAAM;YAC/C,QAAQ,EAAE,kTAOP;SACJ,CAAC;;gBAAA;IA0CF,eAAC;AAAD,CAzCA,AAyCC,IAAA;AAzCY,gBAAQ,WAyCpB,CAAA;AAEY,4BAAoB,GAAG,CAAC,QAAQ,CAAC,CAAC","file":"pager/pager.js","sourcesContent":["import {Component, ChangeDetectionStrategy, OnChanges, Input, Output, EventEmitter} from '@angular/core';\n\n/**\n * A lightweight pager directive that is focused on providing previous/next paging functionality.\n */\n@Component({\n  selector: 'ngb-pager',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `\n    <nav>\n      <ul class=\"pager\">\n        <li [class.disabled]=\"!hasPrev()\" [class.pager-prev]=\"alignLinks\"><a (click)=\"prev()\">Previous</a></li>\n        <li [class.disabled]=\"!hasNext()\" [class.pager-next]=\"alignLinks\"><a (click)=\"next()\">Next</a></li>\n      </ul>\n    </nav>\n    `\n})\nexport class NgbPager implements OnChanges {\n  private _currentPage = 0;  // internal state\n\n  /**\n   *  Number of pages present.\n   */\n  @Input() noOfPages: number;\n\n  /**\n   *  Current page.\n   */\n  @Input() page: number;\n\n  /**\n   *  A flag for determining whether links need to be aligned.\n   */\n  @Input() alignLinks = false;\n\n  /**\n   *  An event fired when the page is changed.\n   *  Event's payload equals the current page.\n   */\n  @Output() pageChange = new EventEmitter();\n\n  prev(): void {\n    if (this.hasPrev()) {\n      this.pageChange.emit(--this._currentPage);\n    }\n  }\n\n  next(): void {\n    if (this.hasNext()) {\n      this.pageChange.emit(++this._currentPage);\n    }\n  }\n\n  hasPrev(): boolean { return this._currentPage > 0; }\n\n  hasNext(): boolean { return this._currentPage < this.noOfPages - 1; }\n\n  ngOnChanges(): void { this._currentPage = Math.max(Math.min(this.page, this.noOfPages - 1), 0); }\n}\n\nexport const NGB_PAGER_DIRECTIVES = [NgbPager];\n"],"sourceRoot":"/source/"}