{"version":3,"sources":["accordion/accordion.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,qBASO,eAAe,CAAC,CAAA;AAEvB,yBAA0B,sBAAsB,CAAC,CAAA;AAEjD,IAAI,MAAM,GAAG,CAAC,CAAC;AAEf;;;GAGG;AAoBH;IAuBE,kBAAwE,SAAuB;QAAvB,cAAS,GAAT,SAAS,CAAc;QAtB/F;;;WAGG;QACM,aAAQ,GAAG,KAAK,CAAC;QAE1B;;;WAGG;QACM,OAAE,GAAG,eAAa,MAAM,EAAI,CAAC;QAEtC;;WAEG;QACM,SAAI,GAAG,KAAK,CAAC;IAO4E,CAAC;IAEnG,6BAAU,GAAV,UAAW,KAAK;QACd,KAAK,CAAC,cAAc,EAAE,CAAC;QACvB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YACnB,IAAI,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC;YACvB,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;gBAChC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YACnC,CAAC;QACH,CAAC;IACH,CAAC;IA5BD;QAAC,YAAK,EAAE;;8CAAA;IAMR;QAAC,YAAK,EAAE;;wCAAA;IAKR;QAAC,YAAK,EAAE;;0CAAA;IAKR;QAAC,YAAK,EAAE;;2CAAA;IAxCV;QAAC,gBAAS,CAAC;YACT,QAAQ,EAAE,WAAW;YACrB,QAAQ,EAAE,UAAU;YACpB,QAAQ,EAAE,kiBAaT;YACD,UAAU,EAAE,CAAC,sBAAW,CAAC;SAC1B,CAAC;mBAwBa,eAAQ,EAAE;mBAAE,aAAM,CAAC,iBAAU,CAAC,cAAM,OAAA,YAAY,EAAZ,CAAY,CAAC,CAAC;;gBAxB/D;IAmCF,eAAC;AAAD,CAlCA,AAkCC,IAAA;AAlCY,gBAAQ,WAkCpB,CAAA;AAED;;;GAGG;AAMH;IAAA;IAyBA,CAAC;IAhBC,kCAAW,GAAX,UAAY,SAAmB;QAC7B,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;YAC1B,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAC,KAAe;gBACnC,EAAE,CAAC,CAAC,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC;oBACxB,KAAK,CAAC,IAAI,GAAG,KAAK,CAAC;gBACrB,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,4CAAqB,GAArB;QACE,IAAM,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,MAAM,CAAC,UAAC,KAAK,IAAK,OAAA,KAAK,CAAC,IAAI,EAAV,CAAU,CAAC,CAAC;QACxE,EAAE,CAAC,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YAC1B,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;QAClC,CAAC;IACH,CAAC;IAvBD;QAAC,sBAAe,CAAC,QAAQ,CAAC;;iDAAA;IAM1B;QAAC,YAAK,CAAC,aAAa,CAAC;;0DAAA;IAZvB;QAAC,gBAAS,CAAC;YACT,QAAQ,EAAE,eAAe;YACzB,IAAI,EAAE,EAAC,MAAM,EAAE,SAAS,EAAE,6BAA6B,EAAE,mBAAmB,EAAC;YAC7E,QAAQ,EAAE,2BAA2B;SACtC,CAAC;;oBAAA;IA0BF,mBAAC;AAAD,CAzBA,AAyBC,IAAA;AAzBY,oBAAY,eAyBxB,CAAA;AAEY,gCAAwB,GAAG,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC","file":"accordion/accordion.js","sourcesContent":["import {\n  Component,\n  forwardRef,\n  Inject,\n  Input,\n  QueryList,\n  ContentChildren,\n  AfterContentChecked,\n  Optional\n} from '@angular/core';\n\nimport {NgbCollapse} from '../collapse/collapse';\n\nlet nextId = 0;\n\n/**\n * The NgbPanel directive builds on top of the NgbCollapse directive to provide a panel with collapsible body that can\n * collapsed or expanded by clicking on the panel's header.\n */\n@Component({\n  selector: 'ngb-panel',\n  exportAs: 'ngbPanel',\n  template: `\n    <div class=\"panel panel-default\" [class.panel-open]=\"open\">\n      <div class=\"panel-heading\" role=\"tab\" [id]=\"id\">\n        <h4 class=\"panel-title\">\n          <a tabindex=\"0\" (click)=\"toggleOpen($event)\"><span [class.text-muted]=\"disabled\">{{title}}</span></a>\n        </h4>\n      </div>\n      <div class=\"panel-collapse\" [ngbCollapse]=\"!open\" [attr.aria-labelledby]=\"id\" role=\"tabpanel\">\n        <div class=\"panel-body\">\n          <ng-content></ng-content>\n        </div>\n      </div>\n    </div>\n  `,\n  directives: [NgbCollapse]\n})\nexport class NgbPanel {\n  /**\n   *  A flag determining whether the panel is disabled or not.\n   *  When disabled, the panel cannot be toggled.\n   */\n  @Input() disabled = false;\n\n  /**\n   *  An optional id for the panel. The id should be unique.\n   *  If not provided, it will be auto-generated.\n   */\n  @Input() id = `ngb-panel-${nextId++}`;\n\n  /**\n   *  Defines whether the panel should be open initially.\n   */\n  @Input() open = false;\n\n  /**\n   *  The title for the panel.\n   */\n  @Input() title: string;\n\n  constructor(@Optional() @Inject(forwardRef(() => NgbAccordion)) private accordion: NgbAccordion) {}\n\n  toggleOpen(event): void {\n    event.preventDefault();\n    if (!this.disabled) {\n      this.open = !this.open;\n      if (this.open && this.accordion) {\n        this.accordion.closeOthers(this);\n      }\n    }\n  }\n}\n\n/**\n * The NgbAccordion directive is a collection of panels.\n * NgbAccordion can assure that only panel can be opened at a time.\n */\n@Component({\n  selector: 'ngb-accordion',\n  host: {'role': 'tablist', '[attr.aria-multiselectable]': '!closeOtherPanels'},\n  template: `<ng-content></ng-content>`\n})\nexport class NgbAccordion implements AfterContentChecked {\n  @ContentChildren(NgbPanel) _panels: QueryList<NgbPanel>;\n\n  /**\n   *  A flag determining whether the other panels should be closed\n   *  when a panel is opened.\n   */\n  @Input('closeOthers') closeOtherPanels: boolean;\n\n  closeOthers(openPanel: NgbPanel): void {\n    if (this.closeOtherPanels) {\n      this._panels.forEach((panel: NgbPanel) => {\n        if (panel !== openPanel) {\n          panel.open = false;\n        }\n      });\n    }\n  }\n\n  ngAfterContentChecked() {\n    const openPanels = this._panels.toArray().filter((panel) => panel.open);\n    if (openPanels.length > 1) {\n      this.closeOthers(openPanels[0]);\n    }\n  }\n}\n\nexport const NGB_ACCORDION_DIRECTIVES = [NgbAccordion, NgbPanel];\n"],"sourceRoot":"/source/"}